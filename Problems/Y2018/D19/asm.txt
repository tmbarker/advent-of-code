~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Summary: I have commented my input instructions below. This
program starts by running INIT1, then if r0 is set to 1, it
will also run INIT2.

The result of running the init functions is to set a large
value into r5. For my inputs, these values were:
   r0 = 0 => r5 = 876
   r0 = 1 => r5 = 10551276
   
Next, the program looped over registers r1 and r2, iterating
from 1 to r5. During each iteration the product r1 * r2 is
compared to r5. When they are equal, i.e. r1 is a divisor of
r5, it is added to r0.

Therefore, the program can be replaced with the following
pseudo code:

P1: r0 = SumOfDivisors(n) // n is r5 after INIT1
P2: r0 = SumOfDivisors(n) // n is r5 after INIT1 & INIT2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


============================================================
ENTRY:
============================================================
<bind ip to r4>
goto INIT1
     ~      #ip 4           // ip is now bound to r4
     0      addi 4 16 4     ip += 16; // goto 17;
 
     
============================================================
LOOP1:
============================================================
     1      seti 1 5 1      r1 = 1;


============================================================
LOOP2:
============================================================
     2      seti 1 2 2      r2 = 1;
     
     
============================================================
LOOP3:
============================================================
if (r1 * r2 == r5)  
  r0 += r1;
     3      mulr 1 2 3      r3 = r1 * r2;
     4      eqrr 3 5 3      r3 = r3 == r5 ? 1 : 0;
     5      addr 3 4 4      ip += r3;
     6      addi 4 1 4      ip += 1;
     7      addr 1 0 0      r0 = r1 + r0;

r2++;
if (r2 <= r5)
  goto LOOP3;
     8      addi 2 1 2      r2 = r2 + 1;
     9      gtrr 2 5 3      r3 = r2 > r5 ? 1 : 0;
    10      addr 4 3 4      ip += r3;
    11      seti 2 7 4      ip = 2; // goto 3;
    
r1++;
if (r1 > r5)
  goto EXIT;
else
  goto LOOP2;
    12      addi 1 1 1      r1 += 1;
    13      gtrr 1 5 3      r3 = r1 > r5 ? 1 : 0;
    14      addr 3 4 4      ip += r3;
    15      seti 1 9 4      ip = 1; // goto 2;
 
    
============================================================
EXIT:
============================================================
return;
    16      mulr 4 4 4      ip = 256; // halt on next cycle

    
============================================================
INIT1:
============================================================
r5 = 836; // 2 * 2 * 19 * 11
    17      addi 5 2 5      r5 = r5 + 2;
    18      mulr 5 5 5      r5 = r5 * r5;
    19      mulr 4 5 5      r5 = ip * r5;
    20      muli 5 11 5     r5 = r5 * 11;
     
r3 = 40; // 1 * 22 + 18
    21      addi 3 1 3      r3 = r3 + 1;
    22      mulr 3 4 3      r3 = r3 * 22;
    23      addi 3 18 3     r3 = r3 + 18;
r5 = 876; // 836 + 40
    24      addr 5 3 5      r5 = r5 + r3;
   
if (r0 == 0) // in part 1 r0 == 0, in part 2 r0 == 1
  goto LOOP1;
else
  goto INIT2;
    25      addr 4 0 4      ip = ip + r0;
    26      seti 0 3 4      ip = 0; // goto 1;

    
============================================================
INIT2:
============================================================
r3 = 10550400; // ((27 * 28) + 29) * 30 * 14 * 32
r5 = 10551276; // 10550400 + 876
r0 = 0;
goto LOOP1;
    27      setr 4 2 3      r3 = 27;
    28      mulr 3 4 3      r3 = r3 * 28;
    29      addr 4 3 3      r3 = 29 + r3;
    30      mulr 4 3 3      r3 = 30 * r3;
    31      muli 3 14 3     r3 = r3 * 14;
    32      mulr 3 4 3      r3 = r3 * 32;
    33      addr 5 3 5      r5 = r5 + r3;
    34      seti 0 4 0      r0 = 0; 
    35      seti 0 5 4      ip = 0; // goto 1;